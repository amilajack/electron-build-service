# https://stackoverflow.com/questions/32845674/setup-nginx-not-to-crash-if-host-in-upstream-is-not-found
# that's why we use var $upstream_host

user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  # "burst nodelay" is used because client does 2 requests (post upload and get status immediatly after upload)
  # 16 is used because one ip can be used for several clients (belarus, company nat) but in general should be 4.
  limit_req_zone $binary_remote_addr zone=build:10m rate=16r/m;
  limit_req_status 429;

  limit_req_zone $binary_remote_addr zone=status:10m rate=16r/m;

  # default 30m but in our case message should be consumed very quickly (no need to queue in general)
  push_stream_message_ttl 3m;
  # default  30s but in our case we post events only on start and on end and build time maybe several minutes
  push_stream_channel_inactivity_time 15m;
  push_stream_shared_memory_size 10m;

  server {
    listen 8001;

    location /publish-build-event {
      allow 192.168.0.0/16;
      allow 172.16.0.0/12;
      allow 10.0.0.0/8;
      deny all;

      push_stream_store_messages on;

      # activate publisher (admin) mode for this location
      push_stream_publisher admin;
      push_stream_channel_info_on_publish off;
      # query string based channel id
      push_stream_channels_path $arg_id;
    }

    location /channels-stats {
      allow 192.168.0.0/16;
      deny all;

      # activate channels statistics mode for this location
      push_stream_channels_statistics;

      # query string based channel id
      push_stream_channels_path $arg_id;
    }
  }

  # https://stackoverflow.com/a/37656784/1910191
  resolver 127.0.0.11 ipv6=off;
  proxy_http_version 1.1;
  proxy_set_header Connection "";

  server {
    listen 443 ssl http2;

    # upload + status + n download requests where n is a small number (<10)
    http2_max_requests 12;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;

    # cat node.crt ca.crt > bundle.crt
    ssl_certificate /run/secrets/bundle.crt;
    ssl_certificate_key /run/secrets/node.key;

    include /etc/nginx/proxy.conf;

    location = /v1/upload {
      # limit only upload, to be sure that if client started to build, requests to status and download will be not blocked
      limit_req zone=build burst=8;

      limit_except POST {
        deny all;
      }

      client_body_temp_path /stage;
      client_body_in_file_only on;
      client_max_body_size 512M;

      proxy_set_header X-File $request_body_file;
      proxy_pass_request_body off;

      proxy_pass http://$upstream_host;
    }

    location ~ /v1/status/(.*) {
      # to limit attempt to brute force request id
      limit_req zone=status burst=8;

      # activate subscriber (streaming) mode for this location
      push_stream_subscriber;
      push_stream_subscriber_connection_ttl 60m;
      push_stream_ping_message_interval 15s;
      push_stream_authorized_channels_only on;

      # positional channel path
      push_stream_channels_path $1;
    }

    location /v1/download/ {
      limit_except GET {
        deny all;
      }

      rewrite ^/v1/download/(.+)$ /$1 break;
      root /stage;
      post_action @deleteDownloaded;
    }

    location @deleteDownloaded {
      internal;
      proxy_set_header X-File $uri;
      proxy_pass http://$upstream_host/downloaded?file=$uri;
    }
  }
}